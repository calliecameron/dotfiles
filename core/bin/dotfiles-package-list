#!/usr/bin/env python3

import os
import pathlib
import subprocess
import sys
from collections import defaultdict
from dataclasses import dataclass


def package_root_valid(root: str) -> bool:
    return subprocess.run(["dotfiles-package-root-valid", root], check=False).returncode == 0


def package_name_valid(name: str) -> bool:
    return subprocess.run(["dotfiles-package-name-valid", name], check=False).returncode == 0


def package_roots() -> tuple[list[pathlib.Path], set[str]]:
    out = []
    invalid = set()
    for r in os.getenv("DOTFILES_PACKAGE_ROOTS", "").split(":"):
        if r:
            if package_root_valid(r):
                out.append(pathlib.Path(r).resolve())
            else:
                invalid.add(r)
    return out, invalid


def packages_in_root(package_root: pathlib.Path) -> tuple[list[pathlib.Path], set[str]]:
    out = []
    invalid = set()
    if package_root.is_dir():
        for path in package_root.iterdir():
            if path.is_dir():
                if package_name_valid(path.name):
                    out.append(path)
                else:
                    invalid.add(path.name)
    return sorted(out), invalid


def package_ignored(package: pathlib.Path) -> bool:
    return subprocess.run(["dotfiles-package-ignored", package.name], check=False).returncode == 0


def package_installed(package: pathlib.Path) -> bool:
    return subprocess.run(["dotfiles-package-installed", package.name], check=False).returncode == 0


def package_has_installer(package: pathlib.Path) -> bool:
    return (
        subprocess.run(["dotfiles-package-has-installer", str(package)], check=False).returncode
        == 0
    )


def package_can_install(package: pathlib.Path) -> bool:
    return (
        subprocess.run(["dotfiles-package-can-install", str(package)], check=False).returncode == 0
    )


@dataclass
class Packages:
    ignored: set[pathlib.Path]
    installed: set[pathlib.Path]
    can_install: set[pathlib.Path]
    cant_install: set[pathlib.Path]
    install_not_needed: set[pathlib.Path]
    duplicates: dict[str, set[pathlib.Path]]
    invalid_roots: set[str]
    invalid_names: set[str]


def status() -> Packages:
    seen = set()
    duplicates: dict[str, set[pathlib.Path]] = defaultdict(set)
    ignored = set()
    installed = set()
    can_install = set()
    cant_install = set()
    install_not_needed = set()
    invalid_roots = set()
    invalid_names = set()

    roots, invalid = package_roots()
    invalid_roots |= invalid

    for root in roots:
        packages, invalid = packages_in_root(root)
        invalid_names |= invalid
        for package in packages:
            if package.name in seen:
                duplicates[package.name].add(package)
                continue

            if package_ignored(package):
                ignored.add(package)
            elif package_installed(package):
                installed.add(package)
            elif not package_has_installer(package):
                install_not_needed.add(package)
            elif package_can_install(package):
                can_install.add(package)
            else:
                cant_install.add(package)

            seen.add(package.name)

    return Packages(
        ignored,
        installed,
        can_install,
        cant_install,
        install_not_needed,
        duplicates,
        invalid_roots,
        invalid_names,
    )


def print_set(heading: str, s: set[pathlib.Path]) -> None:
    if s:
        print(heading)
        for name in sorted([package.name for package in s]):
            print("    " + name)
        print()


def print_status() -> None:
    packages = status()

    if packages.invalid_roots:
        print("WARNING: invalid package roots found: " + str(sorted(packages.invalid_roots)) + "\n")

    if packages.invalid_names:
        print("WARNING: invalid package names found: " + str(sorted(packages.invalid_names)) + "\n")

    if packages.duplicates:
        print(
            "WARNING: duplicate package names found; only the first instance of each will be used: "
            + ", ".join(sorted(packages.duplicates))
            + "\n",
        )

    print_set("Active without installing", packages.install_not_needed)
    print_set("Installed", packages.installed)
    print_set("Available to install ('dotfiles-package-install' to install)", packages.can_install)
    print_set("Not available to install", packages.cant_install)
    print_set("Ignored ('dotfiles-package-unignore' to unignore)", packages.ignored)


def print_package_names(packages: set[pathlib.Path]) -> None:
    names = set()
    for p in packages:
        names.add(p.name)
    for n in sorted(names):
        print(n)


def print_can_ignore() -> None:
    packages = status()
    print_package_names(packages.install_not_needed | packages.can_install | packages.installed)


def print_can_unignore() -> None:
    packages = status()
    print_package_names(packages.ignored)


def print_can_install() -> None:
    packages = status()
    print_package_names(packages.can_install)


def main() -> None:
    if len(sys.argv) > 2:  # noqa: PLR2004
        raise ValueError("Too many args")

    if len(sys.argv) == 1:
        print_status()
    elif sys.argv[1] == "can-ignore":
        print_can_ignore()
    elif sys.argv[1] == "can-unignore":
        print_can_unignore()
    elif sys.argv[1] == "can-install":
        print_can_install()
    else:
        raise ValueError("Unknown command: " + sys.argv[1])


if __name__ == "__main__":
    main()
