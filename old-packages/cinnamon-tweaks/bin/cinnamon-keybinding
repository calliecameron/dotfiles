#!/usr/bin/env python3
# Set a custom cinnamon keybinding

import sys
import os.path
import subprocess
import ast

GSETTINGS_SCHEMA = "org.cinnamon.desktop.keybindings"
GSETTINGS_KEY = "custom-list"


def get_keybindings_list():
    s = subprocess.check_output(
        ["gsettings",
         "get",
         GSETTINGS_SCHEMA,
         GSETTINGS_KEY]).strip().decode(sys.stdout.encoding)
    if s == "@as []":
        s = "[]"
    return ast.literal_eval(s)


def set_keybindings_list(l):
    subprocess.call(
        ["gsettings", "set", GSETTINGS_SCHEMA, GSETTINGS_KEY, str(l)])


def dconf_keybinding_path(keybinding, attr):
    return "/org/cinnamon/desktop/keybindings/custom-keybindings/%s/%s" % (
        keybinding, attr)


def read_string(keybinding, attr):
    return ast.literal_eval(
        subprocess.check_output([
            "dconf",
            "read",
            dconf_keybinding_path(keybinding, attr)]).decode(
                sys.stdout.encoding))


def write_string(keybinding, attr, s):
    subprocess.call([
        "dconf",
        "write",
        dconf_keybinding_path(keybinding, attr),
        "'%s'" % s])


def read_list(keybinding, attr):
    return read_string(keybinding, attr)


def write_single_element_list(keybinding, attr, s):
    subprocess.call([
        "dconf",
        "write",
        dconf_keybinding_path(keybinding, attr),
        "['%s']" % s])


def read_keybinding(keybinding):
    name = read_string(keybinding, "name")
    command = read_string(keybinding, "command")
    key = read_list(keybinding, "binding")
    return (name, command, key)


def usage():
    print("Usage: " + os.path.basename(sys.argv[0]) + " name command key")
    sys.exit(1)


if __name__ == "__main__":
    if len(sys.argv) < 4:
        usage()

    name = sys.argv[1]
    command = sys.argv[2]
    key = sys.argv[3]

    all_keybindings = get_keybindings_list()
    first_unused = 0

    for keybinding in all_keybindings:
        num = int(keybinding.lstrip("custom"))
        if num == first_unused:
            first_unused += 1

        (n, c, k) = read_keybinding(keybinding)
        if n == name and c == command and key in k:
            # Exact match; nothing to do
            sys.exit(0)
        elif n == name:
            # Partial match; update it
            write_string(keybinding, "command", command)
            write_single_element_list(keybinding, "binding", key)
            sys.exit(0)

    # Not found; create a new binding
    keybinding = "custom%d" % first_unused
    write_string(keybinding, "name", name)
    write_string(keybinding, "command", command)
    write_single_element_list(keybinding, "binding", key)

    if keybinding not in all_keybindings:
        all_keybindings.append(keybinding)

    set_keybindings_list(all_keybindings)
